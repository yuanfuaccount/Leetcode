此题可以与leetcode 235 Lowest Common Ancestor of a Binary Search Tree对比来看
问题描述如下：
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]

              3
            /   \
           5     1
          / \   / \
         6   2 0   8
            / \
           7   4
Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

思路：
采用递归思想，先看代码
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
{
    if(root==NULL)
        return root;
    if(root==p || root==q)
        return root;
    TreeNode* l=lowestCommonAncestor(root->left,p,q);
    TreeNode* r=lowestCommonAncestor(root->right,p,q);
    if(l && r) return root;
    return l==NULL? r,l;  //包含了当l,r都为NULL时，返回NULL
}

解释：建议画出递归图，直接看便能看出关系，如p=5,q=7;







