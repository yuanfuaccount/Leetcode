注：代码部分多有参考博客https://www.cnblogs.com/Hwangzhiyoung/p/8733611.html


#此题为leetcode450题，原题如下：
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).

Example:
root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7
    
    
解答：做此题，共明白两个问题
1.关于指针作为参数传递的问题，之前做过的指针作为参数传递的时候，大多是以下情况：void func(Treenode *p){p->val=4;} //在函数内对指针指向的
内容进行修改，此时能改变该地址指向内容的值。然后此题要用到将TreeNode* p本身的地址值进行修改，如void func(Treenode *p){p=其他地址;}，此时
p本身是值拷贝，实际未修改传进来的指针值。为了改变指针值，需要传递引用进来。void func(Treenode* &p){p=其他地址;}（正确）

2.如要删除节点node，实际并不真的将node替换成其他节点。如用node1替换node,不是将node这个struct替换成node1，而是node->val=node1->val,再将
node1删除掉。这样整个二叉搜索树的整体结构没变。

解：该题通用的说明如下
1.如果待删除节点无左右子树，直接将其父节点指向该节点的指针置为NULL;
2.如果待删除节点存在1个子节点，将其父节点指向该节点的指针指向其子节点；
3.如果待删除节点存在2个子节点，直接找到其后继节点，用后继节点的val替换该节点的val,在删除后继节点

在解此题时，如果直接按照上面的逻辑分类，则最后很容易陷入错误，因为涉及到待删除节点是否是根节点的问题，则1，2，3还要进行分类。而1.2.3删除节点的操作都
有一个共性，即被删除节点最多只有一个子节点。因为二叉搜索树任何节点的后继节点要么是一个叶节点，要么没有左子树。不同之处在于1，2可能没有父节点。因此将
上面删除操作合并为一个函数：
    void DeleteNode(TreeNode* &parent,TreeNode* &node)  //删除有少于2个子节点，且有父节点的节点。因为修改了指针地址值，所以此处必须传递引用
    {
        if(parent->val<node->val)
        {
            if(node->left) parent->right=node->left;
            else if(node->right) parent->right=node->right;
            else parent->right=NULL;
        }
        else
        {
            if(node->left) parent->left=node->left;
            else if(node->right) parent->left=node->right;
            else parent->left=NULL;
        }
    }
    
    然后还有搜索待删除节点和找到某个节点后继的函数：
    TreeNode* BST(TreeNode* root,TreeNode* &parent,int key) //此处parent需要传递值，必须用引用
    {
        while(root)
        {
            if(root->val==key) return root;
            parent=root;
            if(root->val<key) root=root->right;
            else root=root->left;
        }
        return root;
    }
    TreeNode* Successor(TreeNode* node,TreeNode* &parent)
    {
        parent=node;
        node=node->right;
        while(node->left)
        {
            parent=node;
            node=node->left;
        }
        return node;
    }
    
    所以正确的逻辑分类应该分为以下几类：
    1.待删除节点左右子节点都存在（不管该节点是不是根节点），都应执行执行上面情况3，调用DeleteNode。
    2.待删除节点是根节点，此时该根节点要么只有左子树，要么只有右子树，直接返回该子树的地址。
    3.待删除节点不是根节点，此时直接调用DeleteNode
    
   
    最终整合以上函数的程序如下：
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        TreeNode* parent=NULL;
        TreeNode* node=BST(root,parent,key);  //找到待删除节点node和其父节点parent;
        if(!node) return root;  //无此节点,直接返回
        if(node->left && node->right) //左右节点都存在
        {
            TreeNode* parent1=NULL;
            TreeNode* successor=Successor(node,parent1);
            DeleteNode(parent1,successor); //后继节点的父节点parent1一定存在
            node->val=successor->val;
            return root;
        }
        if(parent)  //有parent，说明删除节点不是根节点
            DeleteNode(parent,node);
        else if(node->left)  //是根节点且根节点只有左子树
            root=node->left;
        else root=node->right; //是根节点且根节点只有右子树
        return root;
    }
