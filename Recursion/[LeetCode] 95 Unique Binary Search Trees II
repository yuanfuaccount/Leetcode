Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
分析：二叉搜索树的特征是中序遍历的二叉搜索树一定是顺序排列，即二叉搜索树左子树一定比根节点小，右子树一定比根节点大。那么在构造二叉树的时候可以分为以下基本环节：
1.先从1到n中选取一个节点i作为根节点node
2.用1到i-1构建左子树，i+1到n构建右子树
从以上步骤看出，构建一颗二叉搜索树树的步骤是重复的。
重复步骤需要知道二叉搜索树的开始位置和结束位置，重复过程C++代码如下：
vector<TreeNode*> build(int begin,int end)
{
   vector<TreeNode*> subtree; //保存返回的所有搜索树的根节点
   if(end>begin)
      subtree.push_back(NULL); //到达结束条件
   for(int k=begin;k<=end;k++)
   {
      vector<TreeNode*> left_sub=build(begin,k-1);  //构建左子树
      vector<TreeNode*> right_sub=build(k+1,end);  //构建右子树
      //联结根节点和左子树与右子树
      for(int i=0;i<left_sub.size();i++)
      {
         for(int j=0;j<right_sub.size();j++)
         {
            TreeNode *node=new TreeNode(i);
            node->left=left_sub[i];
            node->right=right_sub[j];
            subtree.push_back(node);
         }
      }
   }
   return subtree;
}

最终程序调用build即可
vector<TreeNode*> generateTrees(int n)
{
   if(n==0)
      return {};
   return build(1,n);
}
